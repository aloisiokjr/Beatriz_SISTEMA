/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view.ordemServico;

import controller.OrdemServicoController;
import java.awt.HeadlessException;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.security.NoSuchAlgorithmException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.Arquivo;
import model.OrdemServico;
import model.SituacaoOS;
import util.SQL_URL;
import util.ToHashHex;

/**
 *
 * @author KLEYN
 */
public class OrdemServicoUI extends javax.swing.JFrame {
    
    private OrdemServicoController osController = null;
    
    private OrdemServico osAux = null;
    private lancamentoOrdemServico lancamentoOS = null;
    private OrdemServicoOP osOP = null; 

    /**
     * Creates new form OrdemServicoUI
     * @param osController
     */
    public OrdemServicoUI(OrdemServicoController osController) {
        this.osController = osController;
        initComponents();
        this.setVisible(true);
        this.setExtendedState(this.getExtendedState() | JFrame.MAXIMIZED_BOTH);
        this.toFront();
        setagemInicial();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel5 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelaOS = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        jLabel17 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        btnExcluir = new javax.swing.JButton();
        btnExcluir.setEnabled(false);
        btnCriar = new javax.swing.JButton();
        btnAcompanhamento = new javax.swing.JButton();
        btnExcluir.setEnabled(false);
        jPanel3 = new javax.swing.JPanel();
        jSeparator6 = new javax.swing.JSeparator();
        jLabel3 = new javax.swing.JLabel();
        campoBusca = new javax.swing.JTextField();
        btnBuscar = new javax.swing.JButton();
        radio_NumOS = new javax.swing.JRadioButton();
        radio_PlacaVeiculo = new javax.swing.JRadioButton();
        radio_NomeCliente = new javax.swing.JRadioButton();
        radio_NomeMotorista = new javax.swing.JRadioButton();
        radio_CPF = new javax.swing.JRadioButton();
        radio_CaracVeiculo = new javax.swing.JRadioButton();
        jPanel1 = new javax.swing.JPanel();
        btnFechar = new javax.swing.JButton();
        btnRelatorio = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 3, 24)); // NOI18N
        jLabel1.setText("Lista de Ordens de Serviço");

        tabelaOS.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "", "Numero da OS", "Nome do Cliente", "Placa do Veículo", "Nome do Motorista", "CPF do Motorista", "Data de Entrada", "Previsão de Entrega"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabelaOS.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tabelaOS.getTableHeader().setReorderingAllowed(false);
        tabelaOS.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabelaOSMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tabelaOS);
        if (tabelaOS.getColumnModel().getColumnCount() > 0) {
            tabelaOS.getColumnModel().getColumn(0).setPreferredWidth(50);
            tabelaOS.getColumnModel().getColumn(1).setPreferredWidth(100);
            tabelaOS.getColumnModel().getColumn(2).setPreferredWidth(200);
            tabelaOS.getColumnModel().getColumn(3).setPreferredWidth(120);
            tabelaOS.getColumnModel().getColumn(4).setPreferredWidth(200);
            tabelaOS.getColumnModel().getColumn(5).setPreferredWidth(120);
            tabelaOS.getColumnModel().getColumn(6).setPreferredWidth(120);
            tabelaOS.getColumnModel().getColumn(7).setPreferredWidth(120);
        }

        jLabel17.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/logoR.png"))); // NOI18N

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 438, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(20, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 500, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(16, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 452, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBackground(new java.awt.Color(250, 250, 250));
        jPanel2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.Color.gray, java.awt.Color.gray, java.awt.Color.gray, java.awt.Color.gray));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel2.setText("CONTROLES");

        btnExcluir.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        btnExcluir.setText("EXCLUIR");
        btnExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcluirActionPerformed(evt);
            }
        });
        btnExcluir.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btnExcluirKeyPressed(evt);
            }
        });

        btnCriar.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        btnCriar.setText("LANÇAMENTO");
        btnCriar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCriarActionPerformed(evt);
            }
        });
        btnCriar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btnCriarKeyPressed(evt);
            }
        });

        btnAcompanhamento.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        btnAcompanhamento.setText("ACOMPANHAMENTO");
        btnAcompanhamento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAcompanhamentoActionPerformed(evt);
            }
        });
        btnAcompanhamento.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btnAcompanhamentoKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator2)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnCriar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnAcompanhamento, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnExcluir, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(128, 128, 128))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnCriar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnAcompanhamento)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnExcluir)
                .addContainerGap(27, Short.MAX_VALUE))
        );

        jPanel3.setBackground(new java.awt.Color(250, 250, 250));
        jPanel3.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.Color.gray, java.awt.Color.gray, java.awt.Color.gray, java.awt.Color.gray));

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel3.setText("BUSCAR POR");

        campoBusca.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                campoBuscaKeyPressed(evt);
            }
        });

        btnBuscar.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        btnBuscar.setText("BUSCAR");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });
        btnBuscar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btnBuscarKeyPressed(evt);
            }
        });

        buttonGroup1.add(radio_NumOS);
        radio_NumOS.setFont(new java.awt.Font("Tahoma", 0, 11)); // NOI18N
        radio_NumOS.setText("NÚMERO DA OS");
        radio_NumOS.setToolTipText("");
        radio_NumOS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radio_NumOSActionPerformed(evt);
            }
        });

        buttonGroup1.add(radio_PlacaVeiculo);
        radio_PlacaVeiculo.setFont(new java.awt.Font("Tahoma", 0, 11)); // NOI18N
        radio_PlacaVeiculo.setText("PLACA DO VEÍCULO");

        buttonGroup1.add(radio_NomeCliente);
        radio_NomeCliente.setFont(new java.awt.Font("Tahoma", 0, 11)); // NOI18N
        radio_NomeCliente.setText("NOME DO CLIENTE");

        buttonGroup1.add(radio_NomeMotorista);
        radio_NomeMotorista.setFont(new java.awt.Font("Tahoma", 0, 11)); // NOI18N
        radio_NomeMotorista.setText("NOME DO MOTORISTA");
        radio_NomeMotorista.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radio_NomeMotoristaActionPerformed(evt);
            }
        });

        buttonGroup1.add(radio_CPF);
        radio_CPF.setFont(new java.awt.Font("Tahoma", 0, 11)); // NOI18N
        radio_CPF.setText("CPF MOTORISTA");

        buttonGroup1.add(radio_CaracVeiculo);
        radio_CaracVeiculo.setFont(new java.awt.Font("Tahoma", 0, 11)); // NOI18N
        radio_CaracVeiculo.setText("CARACT. VEÍCULO");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator6)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(radio_NomeCliente)
                                    .addComponent(radio_NumOS))
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addComponent(radio_NomeMotorista))
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addGap(16, 16, 16)
                                        .addComponent(radio_PlacaVeiculo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addGap(5, 5, 5)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(radio_CaracVeiculo)
                                    .addComponent(radio_CPF)))
                            .addComponent(campoBusca)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(btnBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(160, 160, 160))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator6, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(campoBusca, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(radio_NumOS)
                    .addComponent(radio_PlacaVeiculo)
                    .addComponent(radio_CPF))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(radio_NomeCliente)
                    .addComponent(radio_NomeMotorista)
                    .addComponent(radio_CaracVeiculo))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                .addComponent(btnBuscar)
                .addGap(18, 18, 18))
        );

        btnFechar.setBackground(new java.awt.Color(145, 0, 0));
        btnFechar.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnFechar.setForeground(new java.awt.Color(255, 255, 255));
        btnFechar.setText("FECHAR");
        btnFechar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFecharActionPerformed(evt);
            }
        });
        btnFechar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btnFecharKeyPressed(evt);
            }
        });

        btnRelatorio.setBackground(new java.awt.Color(0, 153, 153));
        btnRelatorio.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnRelatorio.setForeground(new java.awt.Color(255, 255, 255));
        btnRelatorio.setText("GERAR RELATÓRIO TXT");
        btnRelatorio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRelatorioActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(74, 74, 74)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnRelatorio, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnFechar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnRelatorio, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnFechar, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(57, 57, 57)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(40, 40, 40))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(31, 31, 31))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(36, 36, 36))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(22, 22, 22))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(33, 33, 33))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tabelaOSMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabelaOSMouseClicked
        if(tabelaOS.getSelectedRow() > -1){
            btnAcompanhamento.setEnabled(true);
            btnExcluir.setEnabled(true);
        }
    }//GEN-LAST:event_tabelaOSMouseClicked

    private void btnExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcluirActionPerformed
        try {
            oSExcluir();
        } catch (UnsupportedEncodingException | NoSuchAlgorithmException ex) {
            Logger.getLogger(OrdemServicoUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnExcluirActionPerformed

    private void btnExcluirKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnExcluirKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            try {
                oSExcluir();
            } catch (UnsupportedEncodingException | NoSuchAlgorithmException ex) {
                Logger.getLogger(OrdemServicoUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btnExcluirKeyPressed

    private void btnCriarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCriarActionPerformed
        getOsController().abreLancamentoOS();
    }//GEN-LAST:event_btnCriarActionPerformed

    private void btnCriarKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnCriarKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            getOsController().abreLancamentoOS();
        }
    }//GEN-LAST:event_btnCriarKeyPressed

    private void btnAcompanhamentoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAcompanhamentoActionPerformed
        oSAcompanhamento();
    }//GEN-LAST:event_btnAcompanhamentoActionPerformed

    private void btnAcompanhamentoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnAcompanhamentoKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            oSAcompanhamento();
        }
    }//GEN-LAST:event_btnAcompanhamentoKeyPressed

    private void campoBuscaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_campoBuscaKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            oSBuscar();
        }
    }//GEN-LAST:event_campoBuscaKeyPressed

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        oSBuscar();
    }//GEN-LAST:event_btnBuscarActionPerformed

    private void btnBuscarKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnBuscarKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            oSBuscar();
        }
    }//GEN-LAST:event_btnBuscarKeyPressed

    private void radio_NumOSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radio_NumOSActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_radio_NumOSActionPerformed

    private void radio_NomeMotoristaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radio_NomeMotoristaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_radio_NomeMotoristaActionPerformed

    private void btnFecharActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFecharActionPerformed
        getOsController().fechaOSUI();
    }//GEN-LAST:event_btnFecharActionPerformed

    private void btnRelatorioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRelatorioActionPerformed
        try {
            geraTxt();
        } catch (IOException ex) {
            Logger.getLogger(OrdemServicoUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnRelatorioActionPerformed

    private void btnFecharKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnFecharKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            getOsController().fechaOSUI();
        }
    }//GEN-LAST:event_btnFecharKeyPressed

    public void setagemInicial(){
        btnAcompanhamento.setEnabled(false);
        btnExcluir.setEnabled(false);
    }
    
    private void oSAcompanhamento(){
        String numOS = (String) tabelaOS.getValueAt(tabelaOS.getSelectedRow(), 2);
        String DocCliente,VeiculoPlaca,NomeMotorista,CPFMotorista,Data,DataPrevisao,Status;
        ArrayList<Arquivo> listaArquivos;
        ArrayList<SituacaoOS> listaSituacao;
        try {
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            String url = SQL_URL.getUrl();
            try (Connection con = DriverManager.getConnection(url)) {
                String sql = "SELECT * FROM OrdemServico WHERE NumOS = ?";
                PreparedStatement pst = con.prepareStatement(sql);
                pst.setString(1, numOS);
                ResultSet rs = pst.executeQuery();

                if(rs.next()){
                    DocCliente = rs.getString("DocCliente");
                    VeiculoPlaca = rs.getString("VeiculoPlaca");
                    NomeMotorista = rs.getString("NomeMotorista");
                    CPFMotorista = rs.getString("CPFMotorista");
                    Data = rs.getString("Data");
                    DataPrevisao = rs.getString("DataEntrega");
                    Status = rs.getString("Encerrada");
                                        
                    listaArquivos = buscaArquivos(numOS);
                    listaSituacao = buscaSituacoes(numOS);
                    
                    OrdemServico os = new OrdemServico(numOS, DocCliente, VeiculoPlaca, NomeMotorista, CPFMotorista, Data,DataPrevisao, Status, listaArquivos, listaSituacao);
                    setOsAux(os);
                }
            }
        } catch (SQLException | HeadlessException | ClassNotFoundException e) {
            JOptionPane.showMessageDialog(null, e);
        }
        osController.abreAcompanhamentoOS();
    }
    
    private ArrayList<Arquivo> buscaArquivos(String numOS){
        ArrayList<Arquivo> listaArquivos = new ArrayList();
        String Path, Descricao;
        try {
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            String url = SQL_URL.getUrl();
            try (Connection con = DriverManager.getConnection(url)) {
                String sql = "SELECT * FROM Arquivo_OS WHERE CodigoOS = ?";
                PreparedStatement pst = con.prepareStatement(sql);
                pst.setString(1, numOS);
                ResultSet rs = pst.executeQuery();

                while(rs.next()){
                    Path = rs.getString("Path");
                    Descricao = rs.getString("Descricao");
                    
                    Arquivo arvAux = new Arquivo(Descricao, Path);
                    listaArquivos.add(arvAux);
                }
            }
        } catch (SQLException | HeadlessException | ClassNotFoundException e) {
            //JOptionPane.showMessageDialog(null, e);
        }
        
        return listaArquivos;
    }
    
    private ArrayList<SituacaoOS> buscaSituacoes(String numOS){
        ArrayList<SituacaoOS> listaSituacao = new ArrayList();
        String Data,Codigo,Descricao,Status,DataPrevisao;
        ArrayList<Arquivo> listaArquivos;
        
        try {
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            String url = SQL_URL.getUrl();
            try (Connection con = DriverManager.getConnection(url)) {
                String sql = "SELECT * FROM SituacaoOS WHERE NumeroOS = ?";
                PreparedStatement pst = con.prepareStatement(sql);
                pst.setString(1, numOS);
                ResultSet rs = pst.executeQuery();

                while(rs.next()){
                    Data = rs.getString("Data");
                    Codigo = rs.getString("Codigo");
                    Descricao = rs.getString("Descricao");
                    Status = rs.getString("Status");
                    DataPrevisao = rs.getString("DataEntrega");
                    
                    listaArquivos = buscaArquivosS(Codigo);
                    SituacaoOS sitOS = new SituacaoOS(Data,numOS,Codigo,Descricao,Status,DataPrevisao,listaArquivos);
                    listaSituacao.add(sitOS);
                }
            }
        } catch (SQLException | HeadlessException | ClassNotFoundException e) {
            //JOptionPane.showMessageDialog(null, e);
        }
        
        return listaSituacao;
    }
    
    private ArrayList<Arquivo> buscaArquivosS(String codS){
        ArrayList<Arquivo> listaArquivos = new ArrayList();
        
        String CodigoOS, Path, Descricao, Data;
        try {
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            String url = SQL_URL.getUrl();
            try (Connection con = DriverManager.getConnection(url)) {
                String sql = "SELECT * FROM Arquivo_Situacao WHERE CodigoS = ?";
                PreparedStatement pst = con.prepareStatement(sql);
                pst.setString(1, codS);
                ResultSet rs = pst.executeQuery();

                while(rs.next()){
                    Path = rs.getString("Path");
                    Descricao = rs.getString("Descricao");
                    Data = rs.getString("Data");
                    
                    Arquivo arvAux = new Arquivo(Descricao, Path);
                    arvAux.setData(Data);
                    listaArquivos.add(arvAux);
                }
            }
        } catch (SQLException | HeadlessException | ClassNotFoundException e) {
            //JOptionPane.showMessageDialog(null, e);
        }
        
        return listaArquivos;
    }
    
    public void oSBuscaTodos(){
        limpaTabelaOS();
        try {
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            String url = SQL_URL.getUrl();
            try (Connection con = DriverManager.getConnection(url)) {
                String sql = "SELECT * FROM OrdemServico";
                PreparedStatement pst = con.prepareStatement(sql);
                ResultSet rs = pst.executeQuery();
                int i = 1;
                while (rs.next()) {
                    String nomeCliente = buscaCliente(rs.getString("DocCliente"));
                    String status = rs.getString("Encerrada");
                    if (status.equals("E")){
                        status = "ENCERRADA";
                    } else if (status.equals("A")){
                        status = "ABERTO";
                    }
                    DefaultTableModel modeloAux = (DefaultTableModel) tabelaOS.getModel();
                    modeloAux.addRow(new Object[]{i, status, rs.getString("NumOS"), nomeCliente, rs.getString("VeiculoPlaca"), rs.getString("NomeMotorista"), rs.getString("CPFMotorista"), rs.getString("Data"), rs.getString("DataEntrega")});
                    i++;
                }  
            }
        } catch (HeadlessException | ClassNotFoundException | SQLException e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }
    
    private void oSBuscar(){
        if (radio_NumOS.isSelected() ||  radio_PlacaVeiculo.isSelected() || radio_NomeMotorista.isSelected() || radio_CPF.isSelected()){
            limpaTabelaOS();
            try {
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = SQL_URL.getUrl();
                try (Connection con = DriverManager.getConnection(url)) {
                    String sql = null;
                    String palavraBusca = campoBusca.getText();
                    if (palavraBusca.equals("")) {
                        oSBuscaTodos();
                    } else {
                        if (radio_NumOS.isSelected()) {
                            sql = "SELECT * FROM OrdemServico WHERE NumOS LIKE '%"+palavraBusca+"%' ORDER BY Encerrada";
                        } else if (radio_PlacaVeiculo.isSelected()) {
                            sql = "SELECT * FROM OrdemServico WHERE VeiculoPlaca LIKE '%"+palavraBusca+"%' ORDER BY Encerrada";
                        } else if(radio_NomeMotorista.isSelected()){
                            sql = "SELECT * FROM OrdemServico WHERE NomeMotorista LIKE '%"+palavraBusca+"%' ORDER BY Encerrada";
                        } else if (radio_CPF.isSelected()){
                            sql = "SELECT * FROM OrdemServico WHERE CPFMotoristaa LIKE '%"+palavraBusca+"%' ORDER BY Encerrada";
                        }
                        PreparedStatement pst = con.prepareStatement(sql);;
                        ResultSet rs = pst.executeQuery();
                        int i = 1;
                        while (rs.next()) {
                            String nomeCliente = buscaCliente(rs.getString("DocCliente"));
                            String status = rs.getString("Encerrada");
                            if (status.equals("E")){
                                status = "ENCERRADA";
                            } else if (status.equals("A")){
                                status = "ABERTO";
                            }
                            DefaultTableModel modeloAux = (DefaultTableModel) tabelaOS.getModel();
                            modeloAux.addRow(new Object[]{i, status, rs.getString("NumOS"), nomeCliente, rs.getString("VeiculoPlaca"), rs.getString("NomeMotorista"), rs.getString("CPFMotorista"), rs.getString("Data")});
                            i++;
                        }
                    }
                    
                    if (tabelaOS.getRowCount() == 0) {
                        JOptionPane.showMessageDialog(null, "A pesquisa não encontrou nenhuma OS.");
                    }
                }
            } catch (HeadlessException | ClassNotFoundException | SQLException e) {
                JOptionPane.showMessageDialog(null, e);
            }
        } else if (radio_NomeCliente.isSelected()){
            limpaTabelaOS();
            int i = 1;
            String palavraBusca = campoBusca.getText();
            try {
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = SQL_URL.getUrl();
                try (Connection con = DriverManager.getConnection(url)) {
                    String sql = "SELECT DocCliente FROM Cliente WHERE Nome LIKE '%"+palavraBusca+"%' OR RazaoSocial LIKE '%"+palavraBusca+"%' OR NomeFantasia LIKE '%"+palavraBusca+"%'";
                    PreparedStatement pst = con.prepareStatement(sql);
                    ResultSet rs = pst.executeQuery();
                    String docCliente;
                    while(rs.next()){
                        docCliente = rs.getString("DocCliente");
                        i = buscaOsPorCliente(docCliente,i);
                    }
                }
            } catch (SQLException | HeadlessException | ClassNotFoundException e) {
                JOptionPane.showMessageDialog(null, e);
            }
            
            try {
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = SQL_URL.getUrl();
                try (Connection con = DriverManager.getConnection(url)) {
                    String sql = "SELECT DocCliente FROM Cliente_NomeVariante WHERE NomeVariante LIKE '%"+palavraBusca+"%'";
                    PreparedStatement pst = con.prepareStatement(sql);
                    ResultSet rs = pst.executeQuery();
                    String docCliente;
                    while(rs.next()){
                        docCliente = rs.getString("DocCliente");
                        i = buscaOsPorCliente(docCliente,i);
                    }
                }
            } catch (SQLException | HeadlessException | ClassNotFoundException e) {
                JOptionPane.showMessageDialog(null, e);
            }
            
            if (tabelaOS.getRowCount() == 0) {
                JOptionPane.showMessageDialog(null, "A pesquisa não encontrou nenhuma OS.");
            }
        } else if(radio_CaracVeiculo.isSelected()){
            limpaTabelaOS();
            int i = 1;
            String palavraBusca = campoBusca.getText();
            try {
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = SQL_URL.getUrl();
                try (Connection con = DriverManager.getConnection(url)) {
                    String sql = "SELECT PlacaVeiculo FROM Veiculo_Caracteristica WHERE Caracteristica LIKE '%"+palavraBusca+"%'";
                    PreparedStatement pst = con.prepareStatement(sql);
                    ResultSet rs = pst.executeQuery();
                    String docCliente;
                    while(rs.next()){
                        docCliente = rs.getString("PlacaVeiculo");
                        i = buscaOsPorVeiculo(docCliente,i);
                    }
                }
            } catch (SQLException | HeadlessException | ClassNotFoundException e) {
                JOptionPane.showMessageDialog(null, e);
            }
        }else {
            JOptionPane.showMessageDialog(null, "Selecione um filtro de busca.");
        }
    }
    
    private int buscaOsPorCliente(String aux, int i){
        try {
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            String url = SQL_URL.getUrl();
            try (Connection con = DriverManager.getConnection(url)) {
                String sql = "SELECT * FROM OrdemServico WHERE DocCliente = ?";
                PreparedStatement pst = con.prepareStatement(sql);
                pst.setString(1, aux);
                ResultSet rs = pst.executeQuery();
                while (rs.next()) {
                    String nomeCliente = buscaCliente(rs.getString("DocCliente"));
                    String status = rs.getString("Encerrada");
                    if (status.equals("E")){
                        status = "ENCERRADA";
                    } else if (status.equals("A")){
                        status = "ABERTO";
                    }
                    DefaultTableModel modeloAux = (DefaultTableModel) tabelaOS.getModel();
                    modeloAux.addRow(new Object[]{i, status, rs.getString("NumOS"), nomeCliente, rs.getString("VeiculoPlaca"), rs.getString("NomeMotorista"), rs.getString("CPFMotorista"), rs.getString("Data")});
                    i++;
                }  
            }
        } catch (HeadlessException | ClassNotFoundException | SQLException e) {
            JOptionPane.showMessageDialog(null, e);
        }
        
        return i;
    }
    
    private int buscaOsPorVeiculo(String aux, int i){
        try {
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            String url = SQL_URL.getUrl();
            try (Connection con = DriverManager.getConnection(url)) {
                String sql = "SELECT * FROM OrdemServico WHERE VeiculoPlaca = ?";
                PreparedStatement pst = con.prepareStatement(sql);
                pst.setString(1, aux);
                ResultSet rs = pst.executeQuery();
                while (rs.next()) {
                    String nomeCliente = buscaCliente(rs.getString("DocCliente"));
                    String status = rs.getString("Encerrada");
                    if (status.equals("E")){
                        status = "ENCERRADA";
                    } else if (status.equals("A")){
                        status = "ABERTO";
                    }
                    DefaultTableModel modeloAux = (DefaultTableModel) tabelaOS.getModel();
                    modeloAux.addRow(new Object[]{i, status, rs.getString("NumOS"), nomeCliente, rs.getString("VeiculoPlaca"), rs.getString("NomeMotorista"), rs.getString("CPFMotorista"), rs.getString("Data")});
                    i++;
                }  
            }
        } catch (HeadlessException | ClassNotFoundException | SQLException e) {
            JOptionPane.showMessageDialog(null, e);
        }
        
        return i;
    }
    
    private void limpaTabelaOS(){
        int rowCount = tabelaOS.getRowCount();
        if (rowCount > 0) {
            while (rowCount > 0) {
                ((DefaultTableModel) tabelaOS.getModel()).removeRow(rowCount - 1);
                rowCount--;
            }
        }
    }
    
    private String buscaCliente(String docCliente){
        String retorno = "";
        
        try {
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            String url = SQL_URL.getUrl();
            try (Connection con = DriverManager.getConnection(url)) {
                String sql = "SELECT NomeFantasia FROM Cliente WHERE DocCliente = ?";
                PreparedStatement pst = con.prepareStatement(sql);
                pst.setString(1, docCliente);
                ResultSet rs = pst.executeQuery();

                if(rs.next()){
                    retorno = rs.getString("NomeFantasia");
                }
            }
        } catch (SQLException | HeadlessException | ClassNotFoundException e) {
            //JOptionPane.showMessageDialog(null, e);
        }
        
        return retorno;
    }
    
    private void oSExcluir() throws UnsupportedEncodingException, NoSuchAlgorithmException{
        String numOS = ((String)tabelaOS.getValueAt(tabelaOS.getSelectedRow(), 1));
        String message = "Deseja realmente excluir a OS '" + numOS + "'?";
        String title = "Confirmação de Exclusao";
        int reply = JOptionPane.showConfirmDialog(null, message, title, JOptionPane.YES_NO_OPTION);
        if (reply == JOptionPane.YES_OPTION) {
            String senhaM = JOptionPane.showInputDialog("Digite a senha mestre para exclusão:");
            String aux = ToHashHex.toHexSHA256(senhaM);
            boolean controle = false;
            try {
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String url = SQL_URL.getUrl();
                try (Connection con = DriverManager.getConnection(url)) {
                    String sql = "SELECT SenhaM FROM PassC WHERE SenhaM = ?";
                    PreparedStatement pst = con.prepareStatement(sql);
                    pst.setString(1, numOS);
                    ResultSet rs = pst.executeQuery();
                    if (rs.next()){
                        controle = true;
                    }
                }
            } catch (HeadlessException | ClassNotFoundException | SQLException e) {
                JOptionPane.showMessageDialog(null, e);
            }
            
            if (controle){
                excluiOSTrue(numOS);
            }
        }
        if (reply == JOptionPane.NO_OPTION) {

        }
    }
    
    private void excluiOSTrue(String numOS){
        try {
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            String url = SQL_URL.getUrl();
            try (Connection con = DriverManager.getConnection(url)) {
                String sql = "DELETE FROM OrdemServico WHERE NumOS = ?";
                PreparedStatement pst = con.prepareStatement(sql);
                pst.setString(1, numOS);
                ResultSet rs = pst.executeQuery();
                if (rs.next()){
                
                }
            }
        } catch (HeadlessException | ClassNotFoundException e) {
            JOptionPane.showMessageDialog(null, e);
        } catch (SQLException e){
            osExcluiArquivos(numOS);
            osExcluiSituacoes(numOS);
        }
    }
    
    private void osExcluiArquivos(String numOS){
        try {
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            String url = SQL_URL.getUrl();
            try (Connection con = DriverManager.getConnection(url)) {
                String sql = "DELETE FROM Arquivo_OS WHERE CodigoOS = ?";
                PreparedStatement pst = con.prepareStatement(sql);
                pst.setString(1, numOS);
                ResultSet rs = pst.executeQuery();

            }
        } catch (HeadlessException | ClassNotFoundException e) {
            JOptionPane.showMessageDialog(null, e);
        } catch (SQLException e) {
            
        }
    }
    
    private void osExcluiSituacoes(String numOS){
        try {
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            String url = SQL_URL.getUrl();
            try (Connection con = DriverManager.getConnection(url)) {
                String sql = "DELETE FROM Arquivo_Situacao WHERE CodigoS IN (SELECT Codigo FROM SituacaoOS WHERE NumeroOS = ?)";
                PreparedStatement pst = con.prepareStatement(sql);
                pst.setString(1, numOS);
                ResultSet rs = pst.executeQuery();
                if (rs.next()){
                    
                }

            }
        } catch (HeadlessException | ClassNotFoundException e) {
            JOptionPane.showMessageDialog(null, e);
        } catch (SQLException e) {
            
        }
        
        try {
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            String url = SQL_URL.getUrl();
            try (Connection con = DriverManager.getConnection(url)) {
                String sql = "DELETE FROM SituacaoOS WHERE NumeroOS = ?";
                PreparedStatement pst = con.prepareStatement(sql);
                pst.setString(1, numOS);
                ResultSet rs = pst.executeQuery();
                if (rs.next()){
                    
                }
            }
        } catch (HeadlessException | ClassNotFoundException e) {
            JOptionPane.showMessageDialog(null, e);
        } catch (SQLException e) {
            
        }
    }
    
    private void geraTxt()throws IOException{
        DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
	Date date = new Date();
	String dataAux = dateFormat.format(date);
        dataAux = dataAux.replaceAll(" ", "--");
        dataAux = dataAux.replaceAll("/", "-");
        dataAux = dataAux.replaceAll(":", "");
        
        File f = new File(".\\saida");
        if(f.mkdir()){
        }
        f = new File(".\\saida\\ordemServico");
        if(f.mkdir()){
        }
        
        try (FileWriter arq = new FileWriter(".\\saida\\ordemServico/BuscaOS--"+dataAux+".txt")) {
            PrintWriter gravarArq = new PrintWriter(arq);

            gravarArq.printf("+-------------- RESULTADO DA BUSCA: ORDEM DE SERVIÇO --------------+%n%n");
            gravarArq.printf("LISTAGEM:%n%n");
            int i;
            for (i=0; i< tabelaOS.getRowCount(); i++) {
                gravarArq.printf("# %2d ##########################%n", i+1);
                gravarArq.printf("Número da OS: " + (String)tabelaOS.getValueAt(i, 1)+"%n");
                gravarArq.printf("Nome do Cliente: " + (String)tabelaOS.getValueAt(i, 2)+"%n");
                gravarArq.printf("Placa do Veículo: " + (String)tabelaOS.getValueAt(i, 3)+"%n");
                gravarArq.printf("Nome do Motorista: " + (String)tabelaOS.getValueAt(i, 4)+"%n");
                gravarArq.printf("CPF do Motorista: " + (String)tabelaOS.getValueAt(i, 5)+"%n");
                gravarArq.printf("Data de Entrada: " + (String)tabelaOS.getValueAt(i, 6)+"%n");
                gravarArq.printf("%n");
            }
            gravarArq.printf("+-------------------------------------------------------------+%n");
            arq.close();

            JOptionPane.showMessageDialog(null,"Dados salvos em 'saida/ordemServico/BuscaOS--"+dataAux+".txt'");
        }
    }    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(OrdemServicoUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAcompanhamento;
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnCriar;
    private javax.swing.JButton btnExcluir;
    private javax.swing.JButton btnFechar;
    private javax.swing.JButton btnRelatorio;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JTextField campoBusca;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator6;
    private javax.swing.JRadioButton radio_CPF;
    private javax.swing.JRadioButton radio_CaracVeiculo;
    private javax.swing.JRadioButton radio_NomeCliente;
    private javax.swing.JRadioButton radio_NomeMotorista;
    private javax.swing.JRadioButton radio_NumOS;
    private javax.swing.JRadioButton radio_PlacaVeiculo;
    private javax.swing.JTable tabelaOS;
    // End of variables declaration//GEN-END:variables

    /**
     * @return the osController
     */
    public OrdemServicoController getOsController() {
        return osController;
    }

    /**
     * @param osController the osController to set
     */
    public void setOsController(OrdemServicoController osController) {
        this.osController = osController;
    }

    /**
     * @return the osAux
     */
    public OrdemServico getOsAux() {
        return osAux;
    }

    /**
     * @param osAux the osAux to set
     */
    public void setOsAux(OrdemServico osAux) {
        this.osAux = osAux;
    }

    /**
     * @return the lancamentoOS
     */
    public lancamentoOrdemServico getLancamentoOS() {
        return lancamentoOS;
    }

    /**
     * @param lancamentoOS the lancamentoOS to set
     */
    public void setLancamentoOS(lancamentoOrdemServico lancamentoOS) {
        this.lancamentoOS = lancamentoOS;
    }

    /**
     * @return the osOP
     */
    public OrdemServicoOP getOsOP() {
        return osOP;
    }

    /**
     * @param osOP the osOP to set
     */
    public void setOsOP(OrdemServicoOP osOP) {
        this.osOP = osOP;
    }
}
